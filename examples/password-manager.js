/**
 * Password Manager Example using PAK (Password Age Kit)
 * 
 * This example demonstrates how to create a complete password manager
 * application from a shell script using PAK.
 */

import { createPasswordManager, generateAgeIntegration } from '@kdbx/pak-lib';

// Original shell script (simplified version of the pa password manager)
const paShellScript = `
#!/bin/sh
# pa - a simple password manager

# Configuration
PA_DIR="\${PA_DIR:-\${XDG_DATA_HOME:-\$HOME/.local/share}/pa}"
PA_LENGTH="\${PA_LENGTH:-50}"
PA_PATTERN="\${PA_PATTERN:-A-Za-z0-9-_}"

# Age encryption paths
identities_file="\$PA_DIR/identities"
recipients_file="\$PA_DIR/recipients"

# Functions
pw_add() {
    if yn "generate a password?"; then
        pass=\$(rand_chars "\${PA_LENGTH}" "\${PA_PATTERN}")
    else
        sread pass "enter a password"
        [ "\$pass" ] || die "password can't be empty"
        sread pass2 "enter a password (again)"
        [ "\$pass" = "\$pass2" ] || die "passwords don't match"
    fi

    mkdir -p "\$(dirname "./\$name")"
    age --encrypt -R "\$recipients_file" -o "./\$name.age" <<-EOF
		\$pass
	EOF
    echo "saved '\$name' to the store."
}

pw_show() {
    age --decrypt -i "\$identities_file" "./\$name.age"
}

pw_list() {
    find . -type f -name \\*.age | sed 's/..//;s/\\.age\$//' | sort
}

pw_del() {
    yn "delete password '\$name'?" && {
        rm -f "./\$name.age"
        rmdir -p "\$(dirname "./\$name")" 2>/dev/null || :
    }
}

# Utility functions
rand_chars() {
    LC_ALL=C tr -dc "\$2" </dev/urandom | dd ibs=1 obs=1 count="\$1" 2>/dev/null
}

yn() {
    printf '%s [y/N]: ' "\$1"
    read -r answer
    case \$answer in [yY]) return 0 ;; esac
    return 1
}

sread() {
    printf '%s: ' "\$2"
    stty -echo
    read -r "\$1"
    stty echo
    printf '\\n'
}

die() {
    printf '%s: %s.\\n' "\$(basename "\$0")" "\$1" >&2
    exit 1
}

# Main logic
case "\$1" in
    add) pw_add ;;
    show) pw_show ;;
    list) pw_list ;;
    del) pw_del ;;
    *) echo "Usage: \$0 {add|show|list|del} [name]" ;;
esac
`;

// Convert the shell script to a JavaScript password manager
console.log('Creating password manager from shell script...');

const result = createPasswordManager(paShellScript, {
    appName: 'SecurePasswordManager',
    target: 'node',
    includeAgeIntegration: true,
    includeWebAuthn: false,
    modernSyntax: true,
    asyncAwait: true,
    typescript: false,
    errorHandling: 'throw'
});

if (result.warnings.length > 0) {
    console.log('Conversion warnings:');
    result.warnings.forEach(warning => {
        console.log(`  ${warning.severity}: ${warning.message}`);
    });
}

console.log('Dependencies required:', result.dependencies);

// Save the generated password manager
import { writeFileSync } from 'fs';
writeFileSync('SecurePasswordManager.js', result.code);
console.log('Password manager saved to: SecurePasswordManager.js');

// Generate additional age integration utilities
console.log('\nGenerating age integration utilities...');

const ageIntegration = generateAgeIntegration({
    identitiesFile: '~/.age/identities',
    recipientsFile: '~/.age/recipients',
    passphrasePrompt: true,
    keyringIntegration: true
}, 'node');

writeFileSync('age-utils.js', ageIntegration);
console.log('Age utilities saved to: age-utils.js');

// Create a simple CLI wrapper
const cliWrapper = `
#!/usr/bin/env node
/**
 * CLI Wrapper for SecurePasswordManager
 * Generated by PAK (Password Age Kit)
 */

const SecurePasswordManager = require('./SecurePasswordManager.js');

async function main() {
    const manager = new SecurePasswordManager();
    await manager.initialize();
    
    const command = process.argv[2];
    const name = process.argv[3];
    const password = process.argv[4];
    
    try {
        switch (command) {
            case 'add':
                if (!name) {
                    console.error('Usage: node cli.js add <name> [password]');
                    process.exit(1);
                }
                await manager.pw_add(name, password);
                break;
            
            case 'show':
                if (!name) {
                    console.error('Usage: node cli.js show <name>');
                    process.exit(1);
                }
                const result = await manager.pw_show(name);
                console.log(result);
                break;
            
            case 'list':
                const passwords = await manager.pw_list();
                console.log(passwords.join('\\n'));
                break;
            
            case 'del':
                if (!name) {
                    console.error('Usage: node cli.js del <name>');
                    process.exit(1);
                }
                await manager.pw_del(name);
                break;
            
            default:
                console.log('Usage: node cli.js {add|show|list|del} [name] [password]');
                process.exit(1);
        }
    } catch (error) {
        console.error('Error:', error.message);
        process.exit(1);
    }
}

main();
`;

writeFileSync('cli.js', cliWrapper);
console.log('CLI wrapper saved to: cli.js');

// Make CLI executable
import { chmodSync } from 'fs';
chmodSync('cli.js', 0o755);

console.log('\nPassword manager creation complete!');
console.log('Files created:');
console.log('  - SecurePasswordManager.js (main class)');
console.log('  - age-utils.js (age encryption utilities)');
console.log('  - cli.js (command-line interface)');
console.log('\nUsage:');
console.log('  node cli.js add mysite');
console.log('  node cli.js show mysite');
console.log('  node cli.js list');
console.log('  node cli.js del mysite'); 